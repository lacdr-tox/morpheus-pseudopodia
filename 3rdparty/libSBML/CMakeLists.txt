# project(libSBML)
SET(LIBSBML_BINARY_DIR ${CMAKE_BINARY_DIR}/3rdparty/libSBML )

# Prefind all required libraries
find_package(LibXml2 REQUIRED)
find_package(ZLIB REQUIRED)
find_package(BZip2 )

include(ExternalProject)
# We need to configure libXML from the parental project 

include(GNUInstallDirs)
SET(LIBSBML_LIB_PATH ${LIBSBML_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})

SET(LIBSBML_STATIC_LIBRARY 
    ${LIBSBML_LIB_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}sbml-static${CMAKE_STATIC_LIBRARY_SUFFIX} 
    CACHE STRING "libSBML static library")
    
SET(LIBSBML_SHARED_LIBRARY
    ${LIBSBML_LIB_PATH}/${CMAKE_SHARED_LIBRARY_PREFIX}sbml${CMAKE_SHARED_LIBRARY_SUFFIX}
    CACHE STRING "libSBML shared libraries")

SET(sbml_cmake_args -DWITH_JAVA=FALSE -DWITH_PYTHON=OFF -DWITH_SWIG=OFF -DWITH_LIBXML=TRUE -DENABLE_COMP=TRUE -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/3rdparty/libSBML -DWITH_CPP_NAMESPACE=TRUE)
SET(sbml_cachhe_args -DLIBXML_LIBRARY:string=${LIBXML2_LIBRARIES} -DLIBXML_INCLUDE_DIR:string=${LIBXML2_INCLUDE_DIR} -DLIBZ_LIBRARY:string=${ZLIB_LIBRARY} -DLIBZ_INCLUDE_DIR:string=${ZLIB_INCLUDE_DIR})

IF(BZIP2_FOUND)
    LIST(APPEND sbml_cmake_args -DWITH_BZIP2=TRUE)
    LIST(APPEND sbml_cache_args -DLIBBZ_INCLUDE_DIR:string=${BZIP2_INCLUDE_DIRS} -DLIBBZ_LIBRARY:string=${BZIP2_LIBRARIES})
ELSE()
    LIST(APPEND sbml_cmake_args -DWITH_BZIP2=FALSE)
ENDIF()

ExternalProject_Add( libSBML
  PREFIX "libSBML-build"
  URL "http://imc.zih.tu-dresden.de/morpheus/packages/source/libSBML-5.17.0-core-plus-packages-src.tar.gz"
  # Configuration paramenters
  CMAKE_ARGS ${sbml_cmake_args}
  # Import depenency definitions into project cache
  CMAKE_CACHE_ARGS ${sbml_cache_args}
  #
#   INSTALL_COMMAND ""
)

SET(LIBSBML_STATIC_DEPENDENCY_LIBRARIES ${LIBXML2_LIBRARIES} ${ZLIB_LIBRARY})
IF(BZIP2_FOUND)
    LIST(APPEND LIBSBML_STATIC_DEPENDENCY_LIBRARIES ${BZIP2_LIBRARIES})
ENDIF()

IF (WIN32)
    set(STD_LIB_SUFFIX ${CMAKE_FIND_LIBRARY_SUFFIXES})
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
    find_library(LIBICONV_LIBRARY iconv)
    find_library(LIBCHARSET_LIBRARY charset charset-static)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${STD_LIB_SUFFIX})
    LIST(APPEND LIBSBML_STATIC_DEPENDENCY_LIBRARIES ${LIBICONV_LIBRARY} ${LIBCHARSET_LIBRARY} wsock32 ws2_32)
ENDIF()

IF( TRUE ) 
    SET(LIBSBML_STATIC_LIBRARIES 
        ${LIBSBML_STATIC_LIBRARY}
        ${LIBSBML_STATIC_DEPENDENCY_LIBRARIES}
        PARENT_SCOPE)

    SET(LIBSBML_STATIC_DEFINITIONS "-DLIBSBML_STATIC")
        
    SET(LIBSBML_SHARED_LIBRARIES
        ${LIBSBML_SHARED_LIBRARY}
        PARENT_SCOPE)
        
    SET(LIBSBML_LIBRARY ${LIBSBML_STATIC_LIBRARIES} PARENT_SCOPE)
    SET(LIBSBML_DEFINITIONS ${LIBSBML_STATIC_DEFINITIONS} PARENT_SCOPE)
    SET(LIBSBML_INCLUDE_DIR "${LIBSBML_BINARY_DIR}/include" CACHE PATH "libSBML include directory" FORCE)
    SET(LIBSBML_FOUND TRUE PARENT_SCOPE)
ELSE()
    SET(LIBSBML_FOUND NOT_FOUND PARENT_SCOPE)
    SET(LIBSBML_LIBRARY         PARENT_SCOPE)
    SET(LIBSBML_DEFINITIONS     PARENT_SCOPE)
    SET(LIBSBML_INCLUDE_DIR     PARENT_SCOPE)
ENDIF()

