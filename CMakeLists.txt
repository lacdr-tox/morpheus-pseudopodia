
cmake_minimum_required(VERSION 3.3.0...3.13.4)
IF (APPLE AND MORPHEUS_RELEASE_BUNDLE) 
	## 10.12 went out of support on Oct 2019
	SET(CMAKE_OSX_DEPLOYMENT_TARGET 10.13 CACHE STRING "Minimum version of the target platform" FORCE)
ENDIF()

PROJECT(morpheus VERSION 2.2.3)
# SET(MORPHEUS_BETA 3)
# SET(MORPHEUS_RC 2)

IF (CMAKE_VERSION VERSION_GREATER 3.9 OR CMAKE_VERSION VERSION_EQUAL 3.9)
	cmake_policy(SET CMP0069 NEW)
	include(CheckIPOSupported)
	check_ipo_supported(RESULT HAVE_IPO)
ELSE()
	SET(HAVE_IPO FALSE)
ENDIF()

SET(MORPHEUS_VERSION "${PROJECT_VERSION}")
IF(DEFINED MORPHEUS_BETA)
	SET(MORPHEUS_VERSION "${MORPHEUS_VERSION}-beta${MORPHEUS_BETA}")
ELSEIF(DEFINED MORPHEUS_RC)
	SET(MORPHEUS_VERSION "${MORPHEUS_VERSION}-rc${MORPHEUS_RC}")
ENDIF()
SET(MORPHEUS_VERSION_STRING "\"${MORPHEUS_VERSION}\"")

STRING(TIMESTAMP MORPHEUS_REVISION "%y%m%d" )
STRING(TIMESTAMP MORPHEUS_REVISION_STRING "\"%d.%m.%Y\"")

MESSAGE(STATUS "MORPHEUS VERSION IS ${MORPHEUS_VERSION}, REVISION ${MORPHEUS_REVISION}" )

CONFIGURE_FILE("version.h.in" ${CMAKE_CURRENT_BINARY_DIR}/version.h @ONLY)
INCLUDE_DIRECTORIES( ${PROJECT_BINARY_DIR})

SET(HAVE_OBJECT_LINKAGE TRUE)

MESSAGE(STATUS "HAVE_OBJECT_LINKAGE " ${HAVE_OBJECT_LINKAGE})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
include(cmake/tools.cmake)

### PLATFORM DEPENDEND INSTALL DIRs of TARGETS
IF( UNIX AND NOT APPLE )
	SET(MORPHEUS_OS "UNIX")
	MESSAGE(STATUS "Compiling for platform *NIX.")
	set(CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
		OWNER_READ OWNER_WRITE OWNER_EXECUTE
		GROUP_READ GROUP_EXECUTE
		WORLD_READ WORLD_EXECUTE
	)
ELSEIF(APPLE)
	SET(MORPHEUS_OS "APPLE")
	MESSAGE(STATUS "Compiling for platform OSX.")
	## Make sure HomeBrew library path is there 
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L /usr/local/lib")
	## Switch to Release Build Mode
	OPTION(MORPHEUS_RELEASE_BUNDLE "Build Mac Application Bundle of morpheus." TRUE)
	IF (MORPHEUS_RELEASE_BUNDLE) 
		SET(MORPHEUS_BUNDLE_DIR "Morpheus.app")
 		#SET( CMAKE_BUILD_TYPE "RELEASE" )
		IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
			SET(CMAKE_INSTALL_PREFIX "~/Applications" CACHE PATH "Install path prefix, prepended onto install directories." FORCE)
		ENDIF()
	ENDIF()
ELSEIF(WIN32)
	SET(MORPHEUS_OS "WIN32")
	SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DWIN32")
	MESSAGE(STATUS "Compiling for platform WIN32.")
ELSE()
	SET(MORPHEUS_OS "UNKNOWN")
	MESSAGE(STATUS "Compiling for unknown platform. Assuming WIN32")
	SET(WIN32 TRUE)
ENDIF()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

SET(CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS} -fPIC")


OPTION(MORPHEUS_TESTS "Enable testing" OFF)

OPTION(MORPHEUS_STATIC_BUILD "Create a statically linked binary." OFF)

IF(MORPHEUS_STATIC_BUILD)
	set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
	SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} "-static -static-libstdc++ -static-libgcc")
ENDIF()

SET(MORPHEUS_GRAPHVIZ "WebRenderer" CACHE STRING "Select Graph rendering backend")
SET_PROPERTY(CACHE MORPHEUS_GRAPHVIZ PROPERTY STRINGS None WebRenderer Library)
IF ( NOT (MORPHEUS_GRAPHVIZ STREQUAL "None" OR MORPHEUS_GRAPHVIZ STREQUAL "WebRenderer" OR MORPHEUS_GRAPHVIZ STREQUAL "Library") )
# ELSE()
	SET(MORPHEUS_GRAPHVIZ "Library" CACHE STRING "Select Graph rendering backend" FORCE)
ENDIF()

FIND_PACKAGE(OpenMP)
option(MORPHEUS_OPENMP "Switch off the usage of OPENMP" ON)

IF (OPENMP_FOUND AND MORPHEUS_OPENMP)
	IF(NOT DEFINED OpenMP_CXX_LIBRARY)
		SET(OpenMP_CXX_LIBRARY "-lgomp")
	ENDIF()
	MESSAGE(STATUS "Enabling OpenMP support for ${CMAKE_CXX_COMPILER_ID} using  '${OpenMP_CXX_FLAGS}' and '${OpenMP_CXX_LIBRARY}")
	SET(HAVE_OPENMP ON)
ELSEIF(NOT HAVE_OPENMP)
	MESSAGE(STATUS "Unable to detect OpenMP compiler support. Disabling OpenMP.")
	SET(HAVE_OPENMP OFF)
ELSE()
	MESSAGE(STATUS "OpenMP support was switched off manually. Disabling OpenMP. ")
	SET(HAVE_OPENMP OFF)
ENDIF()

# Configuration file for the uninstall target
CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
	"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
	IMMEDIATE @ONLY
)

ADD_CUSTOM_TARGET(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake )

IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
		"Choose the type of build, options are: Debug RelWithDebInfo Release MinSizeRel." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)
SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug RelWithDebInfo Release MinSizeRel)   

IF (MORPHEUS_STATIC_BUILD)
	SET(MORPHEUS_DEFAULT_EXEC_NAME ${PROJECT_NAME}-${MORPHEUS_VERSION})
	message(STATUS "Excluding MorpheusGUI from static build")
	SET(MORPHEUS_GUI OFF)
ELSE()
	SET(MORPHEUS_DEFAULT_EXEC_NAME ${PROJECT_NAME})
ENDIF()


SET(MORPHEUS_EXEC_NAME ${MORPHEUS_DEFAULT_EXEC_NAME} CACHE STRING "Base name of the simulator executable and the GUI exexcutable")
OPTION(MORPHEUS_GUI "Build the graphical user interface." ON)

INCLUDE_DIRECTORIES( 3rdparty)
ADD_SUBDIRECTORY( 3rdparty )

SET( SIMULATOR_EXEC_NAME "morpheus")
SET( GUI_EXEC_NAME "morpheus-gui")

IF( MORPHEUS_TESTS )
	enable_testing()
ENDIF()

ADD_SUBDIRECTORY( morpheus )

IF(MORPHEUS_GUI)
	ADD_SUBDIRECTORY( Examples )
	ADD_SUBDIRECTORY( gui )
ENDIF()


# INCLUDE(InstallRequiredSystemLibraries)

MESSAGE(STATUS "Configuring Generators for packaging Morpheus")
INCLUDE(Package.cmake)

